version: "3"

vars:
  BINARY_NAME: cagent{{if eq OS "windows"}}.exe{{end}}
  MAIN_PKG: ./main.go
  BUILD_DIR: ./bin
  GIT_TAG:
    sh: git describe --tags --exact-match 2>/dev/null || echo dev
  GIT_COMMIT:
    sh: git rev-parse HEAD
  BUILD_DATE:
    sh: date -u +"%Y-%m-%dT%H:%M:%SZ"
  GO_SOURCES: "**/*.go"
  BUILD_ARGS: '--build-arg GIT_TAG="{{.GIT_TAG}}" --build-arg GIT_COMMIT="{{.GIT_COMMIT}}" --build-arg BUILD_DATE="{{.BUILD_DATE}}" --secret id=telemetry_api_key,env=TELEMETRY_API_KEY --secret id=telemetry_endpoint,env=TELEMETRY_ENDPOINT --secret id=telemetry_header,env=TELEMETRY_HEADER'
  LDFLAGS: '-X "github.com/docker/cagent/pkg/version.Version={{.GIT_TAG}}" -X "github.com/docker/cagent/pkg/version.Commit={{.GIT_COMMIT}}" -X "github.com/docker/cagent/pkg/version.BuildTime={{.BUILD_DATE}}" -X "github.com/docker/cagent/pkg/telemetry.TelemetryEndpoint={{.TELEMETRY_ENDPOINT}}" -X "github.com/docker/cagent/pkg/telemetry.TelemetryAPIKey={{.TELEMETRY_API_KEY}}" -X "github.com/docker/cagent/pkg/telemetry.TelemetryHeader={{.TELEMETRY_HEADER}}"'

tasks:
  default:
    cmd: task --list

  build:
    desc: Build the application binary
    cmds:
      - go build -ldflags "{{.LDFLAGS}}" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_PKG}}
    sources:
      - "{{.GO_SOURCES}}"
      - "**/*.template"
      - "**/*.txt"
      - "go.mod"
      - "go.sum"
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"

  link:
    desc: Creates a symlink to ~/bin
    cmd: ln -sf {{.USER_WORKING_DIR}}/{{.BUILD_DIR}}/{{.BINARY_NAME}} {{.HOME}}/bin/{{.BINARY_NAME}}

  lint:
    desc: Run golangci-lint
    cmd: golangci-lint run ./...
    sources:
      - "{{.GO_SOURCES}}"
      - ".golangci.yml"

  format:
    desc: Format code
    cmds:
      - go install mvdan.cc/gofumpt@latest
      - gofumpt -w .
    sources:
      - "{{.GO_SOURCES}}"

  test:
    desc: Run tests
    cmd: go test ./...
    sources:
      - "{{.GO_SOURCES}}"
      - "**/*.txt"

  build-local:
    desc: Build binaries for local host platform
    cmd: docker buildx build --target=local {{.BUILD_ARGS}} --platform local --output=./dist .

  cross:
    desc: Build binaries for multiple platforms
    cmd: docker buildx build --target=cross {{.BUILD_ARGS}} --platform linux/amd64,linux/arm64,darwin/amd64,darwin/arm64,windows/amd64 --output=./dist .

  build-image:
    desc: Build Docker image
    cmd: docker buildx build -t docker/cagent {{.BUILD_ARGS}} .

  push-image:
    desc: Build and Push Docker image
    cmd: docker buildx build --push -t docker/cagent {{.BUILD_ARGS}} .

  build-agents:
    desc: Build Demo dockerized agents
    vars:
      DOCKER_ID:
        sh: curl -s --unix-socket ~/Library/Containers/com.docker.docker/Data/backend.sock http://_/registry/info | jq -r .id
    depends: ["build"]
    cmds:
      - ./bin/cagent build --push ./examples/pirate.yaml {{.DOCKER_ID}}/cagent-pirate
      - ./bin/cagent build --push ./examples/github.yaml {{.DOCKER_ID}}/cagent-github
      - ./bin/cagent build --push ./examples/gopher.yaml {{.DOCKER_ID}}/cagent-gopher
      - ./bin/cagent build --push ./examples/mem.yaml {{.DOCKER_ID}}/cagent-mem
